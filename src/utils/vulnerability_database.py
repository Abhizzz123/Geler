import subprocess
import json

class VulnerabilityDatabase:
    # ... (other methods)

    def fetch_exploit_from_exploitdb(self, cve_id):
        try:
            result = subprocess.run(['searchsploit', '-j', cve_id], capture_output=True, text=True)
            if result.returncode == 0:  # Successful search
                exploit_data = json.loads(result.stdout)
                
                # Extract exploit details
                exploits = []
                for exploit in exploit_data['RESULTS_EXPLOIT']:
                    exploits.append({
                        "title": exploit.get('Title', 'N/A'),
                        "url": exploit.get('URL', 'N/A'),
                        "path": exploit.get('Path', 'N/A'),
                        "type": exploit.get('Type', 'N/A'),
                        "platform": exploit.get('Platform', 'N/A'),
                        "date": exploit.get('Date', 'N/A')
                    })
                return exploits
            else:
                return None
        except FileNotFoundError:
            print("Error: searchsploit not found. Please install ExploitDB.")
            return None

    def match_vulnerabilities(self, open_ports, services):
        matched_vulnerabilities = []
        for port, service in zip(open_ports, services):  # Directly use port number
            service_name = service  # Use the service banner directly

            # Use searchsploit to find vulnerabilities for the service
            try:
                result = subprocess.run(['searchsploit', '-j', service_name], capture_output=True, text=True)
                if result.returncode == 0:
                    exploit_data = json.loads(result.stdout)
                    for exploit in exploit_data['RESULTS_EXPLOIT']:
                        cve_id = exploit.get('CVE', 'N/A')  # Extract CVE ID
                        if cve_id != 'N/A':
                            matched_vulnerabilities.append((
                                cve_id,
                                exploit.get('Title', 'N/A'),
                                exploit.get('URL', 'N/A'),
                                exploit.get('Path', 'N/A'),
                                exploit.get('Type', 'N/A'),
                                exploit.get('Platform', 'N/A'),
                                exploit.get('Date', 'N/A')
                            ))
            except FileNotFoundError:
                print("Error: searchsploit not found. Please install ExploitDB.")

        return matched_vulnerabilities
